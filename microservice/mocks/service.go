// Code generated by MockGen. DO NOT EDIT.
// Source: microservice/service.go

// Package mock_microservice is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/dzendos/avito-challenge/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockbankAccountDB is a mock of bankAccountDB interface.
type MockbankAccountDB struct {
	ctrl     *gomock.Controller
	recorder *MockbankAccountDBMockRecorder
}

// MockbankAccountDBMockRecorder is the mock recorder for MockbankAccountDB.
type MockbankAccountDBMockRecorder struct {
	mock *MockbankAccountDB
}

// NewMockbankAccountDB creates a new mock instance.
func NewMockbankAccountDB(ctrl *gomock.Controller) *MockbankAccountDB {
	mock := &MockbankAccountDB{ctrl: ctrl}
	mock.recorder = &MockbankAccountDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbankAccountDB) EXPECT() *MockbankAccountDBMockRecorder {
	return m.recorder
}

// AddRefill mocks base method.
func (m *MockbankAccountDB) AddRefill(ctx context.Context, userID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRefill", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRefill indicates an expected call of AddRefill.
func (mr *MockbankAccountDBMockRecorder) AddRefill(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefill", reflect.TypeOf((*MockbankAccountDB)(nil).AddRefill), ctx, userID, amount)
}

// GetAmount mocks base method.
func (m *MockbankAccountDB) GetAmount(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmount", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAmount indicates an expected call of GetAmount.
func (mr *MockbankAccountDBMockRecorder) GetAmount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmount", reflect.TypeOf((*MockbankAccountDB)(nil).GetAmount), ctx, userID)
}

// GetBalanceHistory mocks base method.
func (m *MockbankAccountDB) GetBalanceHistory(ctx context.Context, userID int64) ([]types.BalanceHistoryUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceHistory", ctx, userID)
	ret0, _ := ret[0].([]types.BalanceHistoryUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceHistory indicates an expected call of GetBalanceHistory.
func (mr *MockbankAccountDBMockRecorder) GetBalanceHistory(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceHistory", reflect.TypeOf((*MockbankAccountDB)(nil).GetBalanceHistory), ctx, userID)
}

// MockoperationsDB is a mock of operationsDB interface.
type MockoperationsDB struct {
	ctrl     *gomock.Controller
	recorder *MockoperationsDBMockRecorder
}

// MockoperationsDBMockRecorder is the mock recorder for MockoperationsDB.
type MockoperationsDBMockRecorder struct {
	mock *MockoperationsDB
}

// NewMockoperationsDB creates a new mock instance.
func NewMockoperationsDB(ctrl *gomock.Controller) *MockoperationsDB {
	mock := &MockoperationsDB{ctrl: ctrl}
	mock.recorder = &MockoperationsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoperationsDB) EXPECT() *MockoperationsDBMockRecorder {
	return m.recorder
}

// AddOperation mocks base method.
func (m *MockoperationsDB) AddOperation(ctx context.Context, userID, serviceID, orderID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOperation", ctx, userID, serviceID, orderID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOperation indicates an expected call of AddOperation.
func (mr *MockoperationsDBMockRecorder) AddOperation(ctx, userID, serviceID, orderID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperation", reflect.TypeOf((*MockoperationsDB)(nil).AddOperation), ctx, userID, serviceID, orderID, amount)
}

// ModifyOperation mocks base method.
func (m *MockoperationsDB) ModifyOperation(ctx context.Context, userID, serviceID, orderID, amount int64, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyOperation", ctx, userID, serviceID, orderID, amount, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyOperation indicates an expected call of ModifyOperation.
func (mr *MockoperationsDBMockRecorder) ModifyOperation(ctx, userID, serviceID, orderID, amount, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOperation", reflect.TypeOf((*MockoperationsDB)(nil).ModifyOperation), ctx, userID, serviceID, orderID, amount, code)
}
